//Se importan los modulos FS para trabajar con el sistemas de archivos y PATH para trabajar con rutas de archivo
const fs = require('fs');
const path = require('path');

//Definicion de variables que vamos a usar : ruta de archivo y array
const TASK_FILE = 'tasks.json';
let tasks = [];

// Carga de tareas desde el archivo
fs.readFile(TASK_FILE, (err, data) => {
    if (err) {
        if (err.code === 'ENOENT') {
            // Creacion del archivo si no extiste
            fs.writeFileSync(TASK_FILE, '[]');
        } else {
            console.error(err);
            process.exit(1);
        }
    } else {
        tasks = JSON.parse(data);
    }
});

//Funcion agregar tarea
function addTask(description) {
    const task = {
        id: tasks.length + 1,
        description,
        status: 'todo',
        createdAt: new Date(),
        updatedAt: new Date()
    };
    tasks.push(task);
    saveTasks();
    console.log(`La Tarea (ID: ${task.id}) ha sido creada con exito!`);
}

//Funcion Actualizar tarea
function updateTask(id, description) {
    const task = tasks.find((task) => task.id === id);
    if (task) {
        task.description = description;
        task.updatedAt = new Date();
        saveTasks();
        console.log(`La Tarea (ID: ${task.id}) ha sido actualizada con exito!`);
    } else {
        console.log(`No se encontro ninguna tarea con el ID ${id}`);
    }
}

// Funcion Eliminar tarea
function deleteTask(id) {
    const index = tasks.findIndex((task) => task.id === id);
    if (index !== -1) {
        tasks.splice(index, 1);
        saveTasks();
        console.log(`La Tarea (ID: ${task.id}) ha sido actualizada con exito!`);
    } else {
        console.log(`No se encontro ninguna tarea con el ID ${id}`);
    }
}

//Funcion marcar una tarea
function markTask(id, status) {
    const task = tasks.find((task) => task.id === id);
    if (task) {
        task.status = status;
        task.updatedAt = new Date();
        saveTasks();
        console.log(`La Tarea (ID: ${id}) ha sido marcada como ${status} con exito!`);
    } else {
        console.log(`No se encontro ninguna tarea con el ID ${id}`);
    }
}

//Funcion para listar todas o por diferentes estados
function listTasks(status) {
    let filteredTasks = tasks;
    if (status) {
        filteredTasks = tasks.filter((task) => task.status === status);
    }
    console.log(filteredTasks.map((task) => `${task.id}: ${task.description} (${task.status})`).join('\n'));
}

//Funcion Guardar
function saveTasks() {
    fs.writeFileSync(TASK_FILE, JSON.stringify(tasks, null, 2));
}

