//Se importan los modulos FS para trabajar con el sistemas de archivos y PATH para trabajar con rutas de archivo
const fs = require('fs');
const path = require('path');

//Definicion de variables que vamos a usar : ruta de archivo y array
const TASK_FILE = 'tasks.json';
let tasks = [];

// Carga de tareas desde el archivo
try {
    const data = fs.readFileSync(TASK_FILE, 'utf8');
    tasks = JSON.parse(data);
} catch (err) {
    if (err.code === 'ENOENT') {
        // Creacion del archivo si no extiste
        fs.writeFileSync(TASK_FILE, '[]');
        tasks = [];
    } else {
        console.error(err);
        process.exit(1);
    }
}


//Funcion agregar tarea
function addTask(description) {
    const task = {
        id: tasks.length + 1,
        description,
        status: 'todo',
        createdAt: new Date(),
        updatedAt: new Date()
    }
    tasks.push(task);
    saveTasks();
    console.log(`La Tarea (ID: ${task.id}) ha sido creada con exito!`);
}

//Funcion Actualizar tarea
function updateTask(id, description) {
    const task = tasks.find((task) => task.id === id);
    if (task) {
        task.description = description;
        task.updatedAt = new Date();
        saveTasks();
        console.log(`La Tarea (ID: ${task.id}) ha sido actualizada con exito!`);
    } else {
        console.log(`No se encontro ninguna tarea con el ID ${id}`);
    }
}

// Funcion Eliminar tarea
function deleteTask(id) {
    const index = tasks.findIndex((task) => task.id === id);
    if (index !== -1) {
        tasks.splice(index, 1);
        saveTasks();
        console.log(`La Tarea (ID: ${id}) ha sido actualizada con exito!`);
    } else {
        console.log(`No se encontro ninguna tarea con el ID ${id}`);
    }
}

//Funcion marcar una tarea
function markTask(id, status) {
    const task = tasks.find((task) => task.id === id);
    if (task) {
        task.status = status;
        task.updatedAt = new Date();
        saveTasks();
        console.log(`La Tarea (ID: ${id}) ha sido marcada como ${status} con exito!`);
    } else {
        console.log(`No se encontro ninguna tarea con el ID ${id}`);
    }
}

//Funcion para listar todas o por diferentes estados
function listTasks(status) {
    let filteredTasks = tasks;
    if (status) {
        filteredTasks = tasks.filter((task) => task.status === status);
    }
    status != null ? console.log(`Lista de Tareas (${status}) :`) : console.log(`Lista de Tareas :`);
    console.log(filteredTasks.map((task) => `${task.id}: ${task.description} (${task.status})`).join('\n'));
}

//Funcion Guardar
function saveTasks() {
    fs.writeFileSync(TASK_FILE, JSON.stringify(tasks, null, 2));
}

//Variable de comandos
const commands = {
    add: (description) => addTask(description),
    update: (id, description) => updateTask(id, description),
    delete: (id) => deleteTask(id),
    'mark-in-progress': (id) => markTask(id, 'in-progress'),
    'mark-done': (id) => markTask(id, 'done'),
    list: (status) => listTasks(status)
};

// Extracci√≥n del comando
const args = process.argv.slice(2);
const command = args.shift();

// Verifica si existe el comando en el objeto de comandos

if (commands[command]) {
    switch (command) {
        case 'add':
            const description = args.join(' ');
            commands[command](description);
            break;
        case 'update':
            const id = parseInt(args[0], 10);
            const newDescription = args.slice(1).join(' ');
            commands[command](id, newDescription);
            break;
        case 'delete':
            const deleteId = parseInt(args[0], 10);
            commands[command](deleteId);
            break;
        case 'mark-in-progress':
            const ProgressId = parseInt(args[0], 10);
            commands[command](ProgressId,"done");
            break;
        case 'mark-done':
            const DoneId = parseInt(args[0], 10);
            commands[command](DoneId,"done");
            break;
        case 'list':
            const listStatus = args[0];
            commands[command](listStatus);
            break;
    }
} else {
    console.log(`Unknown command: ${command}`);
    process.exit(1);
}








//Transforma id que paso como cadena de texto
//const id = parseInt(args[0], 10);
//Transforma cadenas de texto en una unica cadena
//const description = args.slice(1).join(' ');
